WITH
component_customers AS
(
    SELECT
        customer_id,
        customer_company_name,
        customer_industry,
        customer_region_id,
        is_customer_active,
    FROM `sandbox-data-pipelines.sales_silver.dim_customers_daily`
    WHERE 1=1
        AND execution_ts = TIMESTAMP("{{ ts }}")
),

component_date_generator AS
-- Date generator will always generate up to UTC date
-- If something fails in upstream silver table, and the new sales date is not loaded, we will be missing records
(
    SELECT
        *,
        DATE_TRUNC(date, MONTH)     AS month_start_date,
        DATE_TRUNC(date, QUARTER)   AS quarter_start_date,
        DATE_TRUNC(date, YEAR)      AS year_start_date,
    FROM UNNEST(
        GENERATE_DATE_ARRAY(
            "2017-06-01",
            DATE("{{ ds }}"),
            INTERVAL 1 DAY
        )
    )   AS date
),

module_customers_daily AS
(
    SELECT
        component_date_generator.date,
        component_date_generator.month_start_date,
        component_date_generator.quarter_start_date,
        component_date_generator.year_start_date,
        component_customers.*,
    FROM component_customers
    CROSS JOIN component_date_generator
),

module_sales_by_customer AS
-- Aggregating to a sales channel
-- Facts:
--  1. Products can only be returned if the order status is completed

-- Assumptions
--  1. All dollars generated by sales are considered revenue unless the order is cancelled
--  2. All future line items are also created on same day of sale
(
    SELECT
        line_created_date   AS date_of_sale,
        customer_id,
        SUM(CASE WHEN is_order_total_sale THEN line_quantity_sold ELSE NULL END)                            AS quantity_sold_total,
        SUM(CASE WHEN is_order_direct_sale THEN line_quantity_sold ELSE NULL END)                           AS quantity_sold_direct,
        SUM(CASE WHEN is_order_distributor_sale THEN line_quantity_sold ELSE NULL END)                      AS quantity_sold_distributor,
        SUM(CASE WHEN is_order_online_sale THEN line_quantity_sold ELSE NULL END)                           AS quantity_sold_quantity,
        SUM(CASE WHEN is_line_discounted THEN line_quantity_sold ELSE NULL END)                             AS quantity_sold_discounted,

        SUM(CASE WHEN is_order_total_sale THEN line_quantity_returned ELSE NULL END)                        AS quantity_returned_total,
        SUM(CASE WHEN is_order_direct_sale THEN line_quantity_returned ELSE NULL END)                       AS quantity_returned_direct,
        SUM(CASE WHEN is_order_distributor_sale THEN line_quantity_returned ELSE NULL END)                  AS quantity_returned_distributor,
        SUM(CASE WHEN is_order_online_sale THEN line_quantity_returned ELSE NULL END)                       AS quantity_returned_online,
        SUM(CASE WHEN is_line_discounted THEN line_quantity_returned ELSE NULL END)                         AS quantity_returned_discounted,

        SUM(CASE WHEN is_order_total_sale THEN line_revenue_amount_total ELSE NULL END)                     AS revenue_total,
        SUM(CASE WHEN is_order_direct_sale THEN line_revenue_amount_total ELSE NULL END)                    AS revenue_direct,
        SUM(CASE WHEN is_order_distributor_sale THEN line_revenue_amount_total ELSE NULL END)               AS revenue_distributor,
        SUM(CASE WHEN is_order_online_sale THEN line_revenue_amount_total ELSE NULL END)                    AS revenue_online,
        
        SUM(CASE WHEN is_order_total_sale THEN line_discount_amount_total ELSE NULL END)                    AS discount_total,
        SUM(CASE WHEN is_order_direct_sale THEN line_discount_amount_total ELSE NULL END)                   AS discount_direct,
        SUM(CASE WHEN is_order_distributor_sale THEN line_discount_amount_total ELSE NULL END)              AS discount_distributor,
        SUM(CASE WHEN is_order_online_sale THEN line_discount_amount_total ELSE NULL END)                   AS discount_online,
        
        SUM(CASE WHEN is_order_total_sale THEN line_gross_profit_amount_total ELSE NULL END)                AS gross_profit_total,
        SUM(CASE WHEN is_order_direct_sale THEN line_gross_profit_amount_total ELSE NULL END)               AS gross_profit_direct,
        SUM(CASE WHEN is_order_distributor_sale THEN line_gross_profit_amount_total ELSE NULL END)          AS gross_profit_distributor,
        SUM(CASE WHEN is_order_online_sale THEN line_gross_profit_amount_total ELSE NULL END)               AS gross_profit_online,

        SUM(CASE WHEN is_order_total_sale THEN line_net_profit_amount_total ELSE NULL END)                  AS net_profit_total,
        SUM(CASE WHEN is_order_direct_sale THEN line_net_profit_amount_total ELSE NULL END)                 AS net_profit_direct,
        SUM(CASE WHEN is_order_distributor_sale THEN line_net_profit_amount_total ELSE NULL END)            AS net_profit_distributor,
        SUM(CASE WHEN is_order_online_sale THEN line_net_profit_amount_total ELSE NULL END)                 AS net_profit_online,
    FROM `sandbox-data-pipelines.sales_silver.fact_line_item_sales_daily`
    WHERE 1=1
        AND execution_ts = TIMESTAMP("{{ ts }}")
    GROUP BY ALL
),

module_output AS
(
    SELECT
        module_customers_daily.*,
        module_sales_by_customer.* EXCEPT(date_of_sale, customer_id),
    FROM module_customers_daily
    LEFT JOIN module_sales_by_customer
        ON  module_sales_by_customer.customer_id = module_customers_daily.customer_id
        AND module_sales_by_customer.date_of_sale = module_customers_daily.date
)

SELECT 
    *,
    TIMESTAMP("{{ ts }}")   AS execution_ts,
FROM module_output
;
